"condition_14_vs_13"
)
?glmQLFTest
coefs = list(2,3,4,5)
contrasts = makeContrasts(
condition_2_vs_1 = Condition2-Condition1,
condition_3_vs_1 = Condition3-Condition1,
condition_4_vs_1 = Condition4-Condition1,
condition_3_vs_2 = Condition3-Condition2,
condition_4_vs_2 = Condition4-Condition2,
condition_4_vs_3 = Condition4-Condition3,
condition_6_vs_5 = Condition6-Condition5,
condition_7_vs_5 = Condition7-Condition5,
condition_8_vs_5 = Condition8-Condition5,
condition_9_vs_5 = Condition9-Condition5,
condition_7_vs_6 = Condition7-Condition6,
condition_8_vs_6 = Condition8-Condition6,
condition_9_vs_6 = Condition9-Condition6,
condition_8_vs_7 = Condition8-Condition7,
condition_9_vs_7 = Condition9-Condition7,
condition_9_vs_8 = Condition9-Condition8,
condition_11_vs_10 = Condition11-Condition10,
condition_12_vs_10 = Condition12-Condition10,
condition_13_vs_10 = Condition13-Condition10,
condition_14_vs_10 = Condition14-Condition10,
condition_12_vs_11 = Condition12-Condition11,
condition_13_vs_11 = Condition13-Condition11,
condition_14_vs_11 = Condition14-Condition11,
condition_13_vs_12 = Condition13-Condition12,
condition_14_vs_12 = Condition14-Condition12,
condition_14_vs_13 = Condition14-Condition13,
levels=design
)
design
group = factor(exp$Condition_FM)
group
design = model.matrix(~group)
design
contrasts = makeContrasts(
condition_2_vs_1 = Condition2-group1,
condition_3_vs_1 = group3-group1,
condition_4_vs_1 = group4-group1,
condition_3_vs_2 = group3-group2,
condition_4_vs_2 = group4-group2,
condition_4_vs_3 = group4-group3,
condition_6_vs_5 = group6-group5,
condition_7_vs_5 = group7-group5,
condition_8_vs_5 = group8-group5,
condition_9_vs_5 = group9-group5,
condition_7_vs_6 = group7-group6,
condition_8_vs_6 = group8-group6,
condition_9_vs_6 = group9-group6,
condition_8_vs_7 = group8-group7,
condition_9_vs_7 = group9-group7,
condition_9_vs_8 = group9-group8,
condition_11_vs_10 = group11-group10,
condition_12_vs_10 = group12-group10,
condition_13_vs_10 = group13-group10,
condition_14_vs_10 = group14-group10,
condition_12_vs_11 = group12-group11,
condition_13_vs_11 = group13-group11,
condition_14_vs_11 = group14-group11,
condition_13_vs_12 = group13-group12,
condition_14_vs_12 = group14-group12,
condition_14_vs_13 = group14-group13,
levels=design
)
contrasts = makeContrasts(
condition_2_vs_1 = group2-group1,
condition_3_vs_1 = group3-group1,
condition_4_vs_1 = group4-group1,
condition_3_vs_2 = group3-group2,
condition_4_vs_2 = group4-group2,
condition_4_vs_3 = group4-group3,
condition_6_vs_5 = group6-group5,
condition_7_vs_5 = group7-group5,
condition_8_vs_5 = group8-group5,
condition_9_vs_5 = group9-group5,
condition_7_vs_6 = group7-group6,
condition_8_vs_6 = group8-group6,
condition_9_vs_6 = group9-group6,
condition_8_vs_7 = group8-group7,
condition_9_vs_7 = group9-group7,
condition_9_vs_8 = group9-group8,
condition_11_vs_10 = group11-group10,
condition_12_vs_10 = group12-group10,
condition_13_vs_10 = group13-group10,
condition_14_vs_10 = group14-group10,
condition_12_vs_11 = group12-group11,
condition_13_vs_11 = group13-group11,
condition_14_vs_11 = group14-group11,
condition_13_vs_12 = group13-group12,
condition_14_vs_12 = group14-group12,
condition_14_vs_13 = group14-group13,
levels=design
)
contrasts
coefs = list(2,3,4,5)
dfGenes <- list()
lrts <- list()
for (i in (1:length(coefs))){
coef = coefs[[i]]
lrt = glmQLFTest(fit, coef=coef, pvalue=1)
gene <- topTags(lrt, p.value= pvalue,n = Inf)
lrts[[i]] = lrt
dfGenes[[i]] = gene
}
dfGenes <- list()
lrts <- list()
for (i in (1:length(coefs))){
coef = coefs[[i]]
lrt = glmQLFTest(fit, coef=coef)
gene <- topTags(lrt, p.value= 1,n = Inf)
lrts[[i]] = lrt
dfGenes[[i]] = gene
}
for (i in 1:dim(contrasts)[2]){
coef = contrasts[,i]
lrt = glmQLFTest(fit, contrast=coef)
gene = topTags(lrt, p.value= 1,n = Inf)
lrts[[i+length(coefs)]] = lrt
dfGenes[[i+length(coefs)]] = gene
}
dfGenes[[1]]
dfGenes[[2]]
dfGenes[[3]]
for (i in length(dfGenes)){
print(i)
}
for (i in 1:length(dfGenes)){
print(i)
}
for (i in 1:length(dfGenes)){
df = dfGenes[[i]]
print(sum(df$FDR<0.1))
}
dfGenes[[1]]
df = dfGenes[[1]]
df$table$
for (i in 1:length(dfGenes)){
df = dfGenes[[i]]
print(sum(df$table$FDR<0.1))
}
for (i in 1:length(dfGenes)){
df = dfGenes[[i]]
print(sum(df$table$FDR<0.1))
}
for (i in 1:length(dfGenes)){
df = dfGenes[[i]]
print(comparisons[i])
print(sum(df$table$FDR<0.1))
}
files
dir = "~/RNA_Seq/RNA_Seq/R6_2/rsem_result/"
spe = "mouse"
exp_table = "experiment_table.csv"
exp = read.csv(paste0(dir, exp_table))
exp = exp[order(exp$Condition_FM),]
exp
View(exp)
exp$filename
files = exp$observationid
exp$observationid
filename
exp$filename
tpm_files = exp$filename
tmp_files=sapply(tpm_files, function(x){sub("rsem", "tpm", x)})
tmp_files
tpm_files = exp$filename
tmp_files=sapply(tpm_files, function(x){sub("rsem", "tpm", x, fixed=T)})
tmp_files
tpm_files = exp$filename
tmp_files=sapply(tpm_files, function(x){sub("_rsem", "_tpm", x, fixed=T)})
tmp_files
tpm_files = exp$filename
tpm_files=sapply(tpm_files, function(x){sub("_rsem", "_tpm", x, fixed=T)})
tpm_files
exp$tpm_file = tpm_files
exp
write.csv(exp, "experiment_table_tpm.csv", row.names = F, quote = F)
write.csv(exp, paste0(tpm_dir,"experiment_table_tpm.csv"), row.names = F, quote = F)
tpm_dir = "~/RNA_Seq/RNA_Seq/R6_2/rsem_result/tpm"
write.csv(exp, paste0(tpm_dir,"experiment_table_tpm.csv"), row.names = F, quote = F)
tpm_dir = "~/RNA_Seq/RNA_Seq/R6_2/rsem_result/tpm/"
write.csv(exp, paste0(tpm_dir,"experiment_table_tpm.csv"), row.names = F, quote = F)
tpm_files
group = exp$Condition_FM
for (file in tpm_files){
print(file)
}
tpm = data = read.table(paste0(tpm_dir, tpm_files[1]), header = F, sep="\t")
View(tpm)
for (i in 2:length(tpm_files)){
file = tmp_files[i]
data = read.table(paste0(tpm_dir, file), header = F, sep="\t")
tpm = cbind(tpm, data[,2])
}
dim(tpm)
colnames(tpm)=c('', tmp_files)
colnames(tpm)=c('', exp$observationid)
View(exp)
colnames(tpm)=c('', exp$observationid)
exp$observationid
name = exp$observationid
name
colnames(tpm)=c('', name)
View(tpm)
name = sapply(name, toString)
colnames(tpm)=c('', name)
write.csv(tpm, paste0(tpm_dir, "r6-2_gene_expression_tpm.csv"), row.names = F, col.names = T, quote = F)
ensembl = read.csv(paste0(tpm_dir, ensembl_file), header = F)
ensembl_file = "ensembl_mouse.csv"
ensembl = read.csv(paste0(tpm_dir, ensembl_file), header = F)
View(ensembl)
colnames(tpm)=c('gene', name)
tpm_new = merge( tpm, ensembl, by.x="gene", by.y="V2", all=F)
View(tpm_new)
tpm_new$V1
View(tpm_new)
View(tpm)
tpm_new = merge( tpm, ensembl, by.x="gene", by.y="V2", all=F)
tpm_new$V1
write.csv(tpm_new, paste0(tpm_dir, "r6-2_gene_expression_tpm.csv"), row.names = F, col.names = T, quote = F)
write.csv(tpm, paste0(tpm_dir, "r6-2_gene_expression_tpm_gene_symbol.csv"), row.names = F, col.names = T, quote = F)
?kegga
library("edgeR")
?kegga
getKEGGPathwayNames(species.KEGG ="mmu", remove.qualifier = FALSE)
getKEGGPathwayNames(species.KEGG ="mmu", remove.qualifier = FALSE)
kegg = getKEGGPathwayNames(species.KEGG ="mmu", remove.qualifier = FALSE)
View(kegg)
kegg = getKEGGPathwayNames(species.KEGG ="mmu", remove.qualifier = FALSE)
gene = getGeneKEGGLinks(species.KEGG = "mmu", convert = TRUE)
gene_name = getGeneKEGGLinks(species.KEGG = "mmu", convert = FALSE)
View(gene)
View(gene_name)
write.csv(kegg, "kegg_mouse.csv", quote=F)
write.csv(gene, "gene_2_kegg_mouse.csv", quote=F)
write.csv(kegg, "kegg_pathway_mouse.csv")
write.csv(gene, "kegg_pathway_gene_mouse.csv")
write.table(kegg, "kegg_pathway_mouse.txt", sep="\t", quote=F)
write.table(gene, "kegg_pathway_gene_mouse.txt",sep="\t", quote=F)
library("mygenes")
library("mygene")
genes = read.csv(file)
file= './RNA_Seq_Database/Database/NO-sGC-pathway-genes_all.csv'
genes = read.csv(file)
genes
genes = read.csv(file, header=F)
genes
file2 = './RNA_Seq_Database/Database/Information/ensembl_human_rat_mouse.txt'
ensembl = read.txt(file2, sep="\t")
file2 = './RNA_Seq_Database/Database/Information/ensembl_human_rat_mouse.txt'
ensembl = read.txt(file2, sep="\t")
ensembl = read.table(file2, sep="\t")
View(ensembl)
source('~/.active-rstudio-document', echo=TRUE)
View(ensembl)
genes
human = merge(genes, ensembl, by.x="V1", by.y="gene_name")
human = merge(genes, ensembl, by.x="V1", by.y="gene_name", all=F)
View(genes)
ensembl_rat = ensembl[ensembl$species_id==3, ]
ensembl_rat$gene_name2 <- sapply(ensembl_rat$gene_name, toupper)
rat =  merge(genes, ensembl_rat, by.x="V1", by.y="gene_name2", all=F)
View(rat)
ensembl_mouse = ensembl[ensembl$species_id==2, ]
ensembl_mouse$gene_name2 <- sapply(ensembl_mouse$gene_name, toupper)
mouse =  merge(genes, ensembl_mouse, by.x="V1", by.y="gene_name2", all=F)
ensembl_mouse = ensembl[ensembl$species_id==4, ]
ensembl_mouse$gene_name2 <- sapply(ensembl_mouse$gene_name, toupper)
mouse =  merge(genes, ensembl_mouse, by.x="V1", by.y="gene_name2", all=F)
human = merge(genes, ensembl, by.x="V1", by.y="gene_name", all.x=T)
View(human)
rat =  merge(genes, ensembl_rat, by.x="V1", by.y="gene_name2", all.x=T)
ensembl = read.table(file2, sep="\t", header =T)
human = merge(genes, ensembl, by.x="V1", by.y="gene_name", all.x=T)
ensembl_rat = ensembl[ensembl$species_id==3, ]
ensembl_rat$gene_name2 <- sapply(ensembl_rat$gene_name, toupper)
ensembl_mouse = ensembl[ensembl$species_id==2, ]
ensembl_mouse$gene_name2 <- sapply(ensembl_mouse$gene_name, toupper)
mouse =  merge(genes, ensembl_mouse, by.x="V1", by.y="gene_name2", all.x=T)
View(mouse)
file3 = './RNA_Seq_Database/Database/Information/gene_info_human_rat_mouse.txt'
gene_info = read.table(file3, sep="\t", header =T)
file3
gene_info = read.table(file3, sep="\t", header =T)
file3 = './RNA_Seq_Database/Database/Information/gene_info_human_rat_mouse.txt'
gene_info = read.table(file3, sep="\t")
gene_info = read.table(file3, sep="\t", header=T)
gene_info = read.table(file3, sep="\t", header=T)
library(pool)
library(dplyr)
host = Sys.getenv(c("MYSQL"))
username = Sys.getenv(c("MYSQL_USER"))
password = Sys.getenv(c("MYSQL_PASSWORD"))
my_db2 <- dbPool(
RMySQL::MySQL(),
dbname = "rna_seq2",
host = host,
username=username,
password = password
)
gene_info = data.frame(my_db2 %>% tbl("gene_info"))
View(gene_info)
?filter
human_info = gene_info %>% filter(species_id=="1")
View(human_info)
rat_info = gene_info %>% filter(species_id=="3")
View(rat_info)
human_info = gene_info %>% filter(species_id=="1")
mouse_info = gene_info %>% filter(species_id=='2')
rat_info = gene_info %>% filter(species_id=="3")
human = merge(genes, human_info, by.x="V1", by.y="symbol", all.x=T)
human
View(human)
human = merge(genes, human_info, by.x="V1", by.y="symbol", all.x=T) %>% select(c("V1", "ensembl"))
human
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
condition_table = condition_table
getConditionChoices <- function(condition_table){
print(head(condition_table))
}
getConditionChoices(condition_table)
exp = condition_table$experiment_id
exp
exp = distinct(exp)
exp = levels(exp)
exp
exp = condition_table$experiment_id
exp = unique(exp)
exp
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
for (e in exp){
print(e)
}
print(head(condition_table))
}
getConditionChoices(condition_table)
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
outList = c(outList, exp[i]=condition_table$name[condition_table$experiment_id==exp[i]])
}
print(outList)
}
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
outList = c(outList, exp[i]=condition_table$name[condition_table$experiment_id==exp[i]])
}
print(outList)
}
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list(a=c(0,0,0))
for (i in (1: length(exp))){
outList = c(outList, exp[i]=condition_table$name[condition_table$experiment_id==exp[i]])
}
print(outList)
}
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
outList = c(outList, exp[i]=condition_table$name[condition_table$experiment_id==exp[i]])
}
test = list(dke='dfd', sd='ds')
test
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
outList = list.append(outList, exp[i]=condition_table$name[condition_table$experiment_id==exp[i]])
}
print(outList)
}
for (i in (1: length(exp))){
print(i)
outList = list.append(outList, exp[i]=condition_table$name[condition_table$experiment_id==exp[i]])
}
exp[1]
test = list(1='dfd', 2='ds')
test
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
print(i)
outList = list.append(outList, toString(exp[i])=condition_table$name[condition_table$experiment_id==exp[i]])
}
print(outList)
}
test = list(toString(1)='dfd', de='ds')
test
d
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
print(i)
outList = list.append(outList, condition_table$name[condition_table$experiment_id==exp[i]])
}
names(outList) = exp
print(outList)
}
getConditionChoices(condition_table)
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
print(i)
outList = c(outList, condition_table$name[condition_table$experiment_id==exp[i]])
}
names(outList) = exp
print(outList)
}
getConditionChoices(condition_table)
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
print(i)
outList = c(outList, c(condition_table$name[condition_table$experiment_id==exp[i]]))
}
names(outList) = exp
print(outList)
}
getConditionChoices(condition_table)
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
print(i)
outList = c(outList, list(condition_table$name[condition_table$experiment_id==exp[i]]))
}
names(outList) = exp
print(outList)
}
getConditionChoices(condition_table)
getConditionChoices <- function(condition_table){
exp = condition_table$experiment_id
exp = unique(exp)
outList = list()
for (i in (1: length(exp))){
print(i)
outList = c(outList, list(condition_table$name[condition_table$experiment_id==exp[i]]))
}
names(outList) = exp
}
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
poolClose(my_db2)
poolClose(my_db2)
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
poolClose(my_db2)
poolClose(my_db2)
poolClose(my_db2)
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
