data2 = lapply(levels(genes), function(g){
data[data$gene_name == g, ]
})
data2[[2]]
data2[[1]]
data2[[3]]
data2[[4]]
plots = lapply(data2, function(data){
exp = factor(data$experiment)
plot_data = lapply(levels(exp), function(e){
data[data$experiment==e]
})
})
plots = lapply(data2, function(data){
print(data)
# exp = factor(data$experiment)
# plot_data = lapply(levels(exp), function(e){
#   data[data$experiment==e]
# })
})
plots = lapply(data2, function(data){
print("data2sdjfkewjfkejwlrkjwelr     safljewrklrajelrjk")
print(data)
# exp = factor(data$experiment)
# plot_data = lapply(levels(exp), function(e){
#   data[data$experiment==e]
# })
})
plots = lapply(data2, function(data){
print("data2sdjfkewjfkejwlrkjwelr     safljewrklrajelrjk")
print(data$experiment)
# exp = factor(data$experiment)
# plot_data = lapply(levels(exp), function(e){
#   data[data$experiment==e]
# })
})
plots = lapply(data2, function(data){
exp = factor(data$experiment)
plot_data = lapply(levels(exp), function(e){
data[data$experiment==e,]
})
})
plots
plots = lapply(data2, function(data){
exp = factor(data$experiment)
plot_data = lapply(levels(exp), function(e){
data[data$experiment==e,]
})
print(plot_data)
})
plots = lapply(data2, function(data){
exp = data$experiment
plots = lapply(levels(exp), function(e){
plot_data = data[data$experiment==e,]
plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(plot_ly)
})
})
subplot(boxPlotList, shareY = TRUE, margin = 0.02)
subplot(plots, shareY = TRUE, margin = 0.02)
subplot(plots[[1]], shareY = TRUE, margin = 0.02)
plots = lapply(data2, function(data){
exp = data$experiment
plots = lapply(levels(exp), function(e){
plot_data = data[data$experiment==e,]
p= plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
subplot(plots[[1]], shareY = TRUE, margin = 0.02)
subplot(plots, shareY = TRUE, margin = 0.02)
plots = lapply(data2, function(data){
exp = data$experiment
plots = lapply(levels(exp), function(e){
plot_data = data[data$experiment==e,]
p= plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
p
return(p)
})
})
plots
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(levels(exp), function(e){
plot_data = data[data$experiment==e,]
p= plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
p
return(p)
})
})
plots
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(levels(exp), function(e){
plot_data = d[d$experiment==e,]
p= plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
p
return(p)
})
})
plots
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(levels(exp), function(e){
plot_data = d[d$experiment==e,]
print(head(plot_data))
p= plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
plot_data = d[d$experiment==e,]
print(head(plot_data))
p= plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots
data = read.csv("test.csv")
data = data[,-1]
head(data)
genes = factor(data$gene_name)
genes
data2 = lapply(levels(genes), function(g){
data[data$gene_name == g, ]
})
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
plot_data = d[d$experiment==e,]
print(head(plot_data))
p= plot_ly(plot_data, x = ~condition, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
plot_data = d[d$experiment==e,]
print(head(plot_data))
p= plot_ly(plot_data, x = ~condition_name, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots
plots = lapply(data2, function(d){
exp = d$experiment
print(exp)
plots = lapply(unique(exp), function(e){
plot_data = d[d$experiment==e,]
print(head(plot_data))
p= plot_ly(plot_data, x = ~condition_name, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots = lapply(data2, function(d){
exp = d$experiment
print(exp)
print(unique(exp))
plots = lapply(unique(exp), function(e){
plot_data = d[d$experiment==e,]
# print(head(plot_data))
p= plot_ly(plot_data, x = ~condition_name, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
plot_data = d[d$experiment==e,]
print(head(d))
p= plot_ly(plot_data, x = ~condition_name, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
print(e)
plot_data = d[d$experiment==e,]
print(head(d))
p= plot_ly(plot_data, x = ~condition_name, y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
print(e)
plot_data = d[d$experiment==e,]
p= plot_ly(plot_data, x = ~factor(condition_name), y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group")
return(p)
})
})
plots
subplot(plots, shareY = TRUE, margin = 0.02)
subplot(plots[[1]], shareY = TRUE, margin = 0.02)
subplot(plots[[2]], shareY = TRUE, margin = 0.02)
subplot(plots[[3]], shareY = TRUE, margin = 0.02)
subplot(plots[[4]], shareY = TRUE, margin = 0.02)
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
print(e)
plot_data = d[d$experiment==e,]
p= plot_ly(plot_data, x = ~factor(condition_name), y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group", title=e)
return(p)
})
})
plots
names(data2) = levels(genes)
data2 = lapply(levels(genes), function(g){
data[data$gene_name == g, ]
})
names(data2) = levels(genes)
data2
data2$C1orf112
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
print(e)
plot_data = d[d$experiment==e,]
p= plot_ly(plot_data, x = ~factor(condition_name), y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group", title=plot_data$gene_name[1])
return(p)
})
})
plots
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
print(e)
plot_data = d[d$experiment==e,]
p= plot_ly(plot_data, x = ~factor(condition_name), y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group", title=plot_data$gene_name[1], xaxis=list(title=e))
return(p)
})
})
plots
subplots(plots[[2]])
subplot(plots[[2]])
subplot(plots[[1]])
subplot(plots[[2]])
subplot(plots[[2]], shareY = T)
subplot(plots[[1]], shareY = T)
subplot(plots[[1]], plots[[3]] shareY = T)
subplot(plots[[1]], plots[[3]], shareY = T)
subplot(list(plots[[1]], plots[[3]]), shareY = T)
subplot(plots[[1]], shareY = T)
subplot(plots[[3]], shareY = T)
subplot(plots[[4]], shareY = T)
subplot(plots[[1]],plots[[4]], shareY = T)
subplot(list(plots[[1]],plots[[4]]), shareY = T)
subplot(list(plots[[1]],plots[[4]]))
typeof(plots[[1]])
typeof(plots[[4]])
subplot(as.list(plots[[1]],plots[[4]]))
plots
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
plots = do.call(c, unlist(plots, recursive = F))
plots
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
print(e)
plot_data = d[d$experiment==e,]
p= plot_ly(plot_data, x = ~factor(condition_name), y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group", title=plot_data$gene_name[1], xaxis=list(title=e))
return(p)
})
})
plots
plots = do.call(c, unlist(plots))
plots
plots = lapply(data2, function(d){
exp = d$experiment
plots = lapply(unique(exp), function(e){
print(e)
plot_data = d[d$experiment==e,]
p= plot_ly(plot_data, x = ~factor(condition_name), y = ~expression, name = e, type = "box", boxpoints="all", pointpos=0) %>%
layout(boxmode = "group", title=plot_data$gene_name[1], xaxis=list(title=e))
return(p)
})
})
plots2 = do.call(c, unlist(plots))
plots2 = unlist(plots)
plots2
plots
plots[[1]]
c(plots[[1]], plots[[2]])
subplot(c(plots[[1]], plots[[2]]))
subplot(c(plots[[1]], plots[[2]]), nrow=3, shareX=T)
subplot(c(plots[[1]], plots[[2]]), nrow=3, shareX=T)
subplot(c(plots[[1]], plots[[2]]),  shareX=T)
subplot(c(plots[[1]], plots[[2]]),  shareX=F, shareY=F)
?subplot
subplot(c(plots[[1]], plots[[2]]), plots[[4]], nrow=2, shareX=F, shareY=F)
subplot(c(plots[[1]], plots[[2]]),shareX=F, shareY=F)
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
?plot_ly
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
method = "resolveList"
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
install.packages("Rcurl")
install.packages("RCurl")
install.packages("XML")
library(RCurl)
url <- "http://string-db.org/api/svg/network?identifiers=TP53%0DEGFR&add_white_nodes=10&network_flavor=actions"
svg <- getURL(url)
library(XML)
doc <- htmlParse(svg)
?xpathSApply
p <- xpathApply(doc, "//g/text", xmlGetAttr, xmlValue)
library(XML)
doc <- htmlParse(svg)
p <- xpathApply(doc, "//g/text", xmlGetAttr, xmlValue)
p <- xpathSApply(doc, "//g/text", xmlGetAttr, xmlValue)
p <- xpathSApply(doc, "//g/text", xmlValue)
p
unique(p)
p
svg
source("https://bioconductor.org/biocLite.R")
biocLite("STRINGdb")
library(STRINGdb)
source("https://bioconductor.org/biocLite.R")
biocLite("STRINGdb")
biocLite("STRINGdb")
install.packages("Rcpp")
biocLite("STRINGdb")
library("RcppArmadillo", lib.loc="~/R/win-library/3.4")
install.packages("Rcpp")
install.packages("Rcpp")
library("RcppArmadillo", lib.loc="~/R/win-library/3.4")
detach("package:RcppArmadillo", unload=TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
source("https://bioconductor.org/biocLite.R")
biocLite("STRINGdb")
library(STRINGdb)
string_db <- STRINGdb$new( species=9606,
+ score_threshold=0, input_directory="" )
string_db <- STRINGdb$new( species=9606,
score_threshold=0, input_directory="" )
STRINGdb$methods
STRINGdb$methods()
?get_neighbors
string_db <- STRINGdb$new( version="10", species=9606,
score_threshold=0, input_directory="" )
example1_mapped <- string_db$map( "trpA", "gene", removeUnmappedRows = TRUE )
example1_mapped
example1_mapped <- string_db$map( c("trpA"), "gene", removeUnmappedRows = TRUE )
example1_mapped <- string_db$map( "trpA", "gene", removeUnmappedRows = TRUE )
?string_db$get_proteins()
?string_db$get_proteins
?string_db$get_proteins
string_db$get_neighbors
?string_db$get_neighbors
string_db$get_neighbors("trpA")
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
tabPanel("String Database",
DT::dataTableOutput("string"),
tags$div(id="string_setting", class="row",
tags$div(class="col col-sm-3",
selectInput("network_flavor", "Meaning of Network Edges", choices=c("confidence", "evidence", "actions"), selected = "confidence", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("requried_score", "Minimum Required Interaction Score", choices=c("900", "700", "400", "150"), selected = "900", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("addInteractor1", "Max Number of Interactors to Show (1st shell)", choices=c("5", "10", "20", "50"), selected = "10", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("addInteractor2", "Max Number of Interactors to Show (2nd shell)", choices=c("0", "5", "10", "20", "50"), selected = "0", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL))
),
actionButton("updateString", 'Update'),
tags$div(id = "string_result", class="row",
tags$div(id="string_svg", class="col col-sm-8"),
tags$div(id="string_svg_legend", class="col col-sm-4",
htmlTemplate("legend.html"))),
tags$div(id= "string_pathway"
)
)
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
tabPanel("String Database",
DT::dataTableOutput("string"),
tags$div(id="string_setting", class="row",
tags$div(class="col col-sm-3",
selectInput("network_flavor", "Meaning of Network Edges", choices=c("confidence", "evidence", "actions"), selected = "confidence", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("requried_score", "Minimum Required Interaction Score", choices=c("900", "700", "400", "150"), selected = "900", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("addInteractor1", "Max Number of Interactors to Show (1st shell)", choices=c("5", "10", "20", "50"), selected = "10", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)),
tags$div(class="col col-sm-3",
selectInput("addInteractor2", "Max Number of Interactors to Show (2nd shell)", choices=c("0", "5", "10", "20", "50"), selected = "0", multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL))
),
actionButton("updateString", 'Update'),
tags$div(id = "string_result", class="row",
tags$div(id="string_svg", class="col col-sm-6"),
tags$div(id="string_svg_legend", class="col col-sm-6",
htmlTemplate("legend.html"))),
tags$div(id= "string_pathway"
)
)
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
shiny::runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
runApp('Github/RNA_Seq_Report_App/rna_seq_gene_search_shiny')
